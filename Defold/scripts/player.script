local origRotation

local game_controller = "default:/main#game_controller"

function init(self)                                 -- [1]
	msg.post(".", "acquire_input_focus")
	origRotation = go.get_rotation();
	self.has_inventory = false
	self.direction = 'down'
end

function final(self)                                -- [7]
	msg.post(".", "release_input_focus")            -- [8]
end

function on_input(self, action_id, action)
	-- send move msg to server
	new_direction = false
	if action.pressed then
		if action_id == hash("up") then 
			new_direction = "up"
		elseif action_id == hash("down") then
			new_direction = "down"
		elseif action_id == hash("right") then
			new_direction = "right"
		elseif action_id == hash("left") then
			new_direction = "left"
		elseif action_id == hash("drop") then
			msg.post(game_controller, "drop");
		elseif action_id == hash("use") then
			msg.post(game_controller, "use");
		elseif action_id == hash("refill") then --just for testing
			msg.post(game_controller, "refill", {item = "all"});
		end
		if new_direction then
			msg.post(game_controller, "move", {dir = new_direction});
		end
	end
end

function draw_inventory(inventory)
	msg.post("#item", "play_animation", { id = hash(inventory) });
	--item.play_flipbook("#item", hash(inventory))
end

function on_message(self, message_id, message, sender)
	local position = go.get_position();
	if message.x and message.y then
		position.x = message.x;
		position.y = message.y;
		go.set_position(position);
		--go.set_rotation(origRotation * vmath.quat_rotation_z(math.rad(message.rot)))
	end

	if not (message.inventory == "Empty") then
		print(message.inventory, message.rot)
		sprite.play_flipbook("#sprite",hash("Player_" .. message.rot .. "_Hold"))
	else
		sprite.play_flipbook("#sprite",hash("Player_" .. message.rot))
	end

	draw_inventory(message.inventory)
	
	
end

