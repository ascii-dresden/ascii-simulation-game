local ColyseusClient = require "colyseus.client"
local id
-- SERVER VARS
local server_adress = "localhost"
local server_port = "2567"
local debug = true;

--VARS
local client
local room
-- 1 grid on server is this many pixel:
local scaling = 100;
local spriteCenter = 50;
local other_players = {}
local customers = {}

function setContains(set, key)
	return set[key] ~= nil
end

function gamestateHasCustomer(id)
	for k,v in pairs(room.state.customers) do
		if v.id == id then
			return true
		end
	end
	return false
end

function drawCustomers(change)
	--update and add customers from gamestate


	for pos, customer in pairs(room.state.customers) do

		-- called out of order
		if not setContains(customers, customer.id) then
			-- create new customer if not yet created
			created_id = factory.create("default:/customer_factory#factory", vmath.vector3(50,0,0.1), vmath.quat(),{},3.125)
			customers[customer.id] = created_id
			customer_go = customers[customer.id]
			msg.post(customer_go, "Game State", {sprite_id = customer.sprite_id})
			

		end
		--update all customer
		--lua starts indexing at 1 instead of 0 like everything else
		newy = (pos-1) * scaling + spriteCenter;
		customer_go = customers[customer.id]
		msg.post(customer_go, "Game State", {y = newy, order = customer.wants})
	end

	-- remove customers not in gamestate

	for customer_id, customer_go in pairs(customers) do
		if not gamestateHasCustomer(customer_id) then
			go.delete(customers[customer_id])
			customers[customer_id] = nil;
		end
	end
end

function drawScore(change)
	for k, v in pairs(change) do
		if v['field'] == 'score' then
			msg.post('/score', 'score', {score = v['value']})
		end
	end
end

-- maybe seperate server-client communication and object controller
-- positions of interactable objects 
local fullKolle   = {x = 8, y = 4, rotation = 1}
local fullPremium = {x = 8, y = 5, rotation = 1}
local fullZotrine = {x = 8, y = 6, rotation = 1}

--handles position and rotation of each player for state changing
function Move(change)
	if room.state.players and room.state.players[id] then
		newx = room.state.players[id].x*scaling + spriteCenter;
		newy = room.state.players[id].y*scaling + spriteCenter;
		newrot = room.state.players[id].rotation;
		newinv = room.state.players[id].inventory
		msg.post("default:/player#player", "Game State", {x = newx, y = newy, rot = newrot, inventory = newinv, color= room.state.players[id].sprite});

		for other_id,value in pairs(room.state.players) do
			if other_id ~= id and room.state.players[other_id].x and not other_players[other_id] then 
				newx = room.state.players[other_id].x*scaling + spriteCenter;
				newy = room.state.players[other_id].y*scaling + spriteCenter;

				created_id = factory.create("default:/other_player_factory#factory", vmath.vector3(newx, newy, 0.1),vmath.quat(),{},3.125)
				other_players[other_id] = created_id

			elseif other_players[other_id] and other_id ~= id then
				newx = room.state.players[other_id].x*scaling + spriteCenter;
				newy = room.state.players[other_id].y*scaling + spriteCenter;
				newrot = room.state.players[other_id].rotation;
				newinv = room.state.players[other_id].inventory
				
				-- go.set_position(vmath.vector3(newx, newy, 1), other_players[other_id])
				msg.post(other_players[other_id], "Game State", {x = newx, y = newy , rot = newrot, inventory = newinv, color= room.state.players[other_id].sprite});

			end
		end
		drawCustomers(change)
		drawScore(change)
	end
end

function onStateChange(change)
	Move(change)
	for k, v in pairs(change) do
		if v['field'] == 'customers' then
			drawCustomers(change)
		end
	end
end


function init(self)

	
	if debug then
		client = ColyseusClient.new("ws://" .. server_adress .. ":" .. server_port,false)
	else
		server_adress = "game.ascii.coffee/api"
		client = ColyseusClient.new("wss://" .. server_adress,false)
	end

	join()

end

function update(self, dt)
	client:loop()
end

function join(room_id)
	if room_id ~= nil then
	client:join_or_create("Ascii".. room_id, {}, function(err, room_instance)
		if err then
			print("ERROR JOINING ROOM")
			pprint(err)
			return
		end

		room = room_instance

		room.state.on_change = onStateChange;

		room:on_message("id", function(message)
			id = message;
		end);		
	end);

end

end

function on_message(self, message_id, message, sender)
	--no messages can be sent before the client is ready
	if message.room_id ~= nil then
		join(message.room_id)
	end

	if (not id) then
		return
	end
	if (message_id == hash("move")) then
		room:send("move",message.dir);
	elseif (message_id == hash("use")) then
		room:send("use")
	end
	
end
