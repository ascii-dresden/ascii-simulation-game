local ColyseusClient = require "colyseus.client"
local id
-- SERVER VARS
local server_adress = "localhost"
local server_port = "2567"
local debug = true

--VARS
local client
local room
-- 1 grid on server is this many pixel:
local scaling = 100;
local other_players = {}

function onStateChange(change)
	if room.state.players and room.state.players[id] then
		newx = room.state.players[id].x*scaling;
		newy = room.state.players[id].y*scaling;
		msg.post("default:/player#player", "Game State", {x = newx, y = newy});

		for other_id,value in pairs(room.state.players) do
			if other_id ~= id and room.state.players[other_id].x and not other_players[other_id] then 
				print(other_id, room.state.players[other_id])
				newx = room.state.players[other_id].x*scaling;
				newy = room.state.players[other_id].y*scaling;
				
				created_id = factory.create("default:/other_player_factory#factory", vmath.vector3(newx, newy, 1),vmath.quat(),{},1)
				other_players[other_id] = created_id
				
			elseif other_players[other_id] and other_id ~= id then
				newx = room.state.players[other_id].x*scaling;
				newy = room.state.players[other_id].y*scaling;
				-- go.set_position(vmath.vector3(newx, newy, 1), other_players[other_id])
				msg.post(other_players[other_id], "Game State", {x = newx, y = newy});
				
			end
		end
	end
end


function init(self)
	if debug then
		client = ColyseusClient.new("ws://" .. server_adress .. ":" .. server_port,false)
	else
		server_adress = "asciigame.pvc.ifsr.de/api"
		client = ColyseusClient.new("wss://" .. server_adress,false)
	end
	client:join_or_create("Ascii", {}, function(err, room_instance)
		if err then
			print("ERROR JOINING ROOM")
			pprint(err)
			return
		end

		room = room_instance

		room.state.on_change = onStateChange;

		room:on_message("id", function(message)
			id = message;
		end);		
	end);

end

function update(self, dt)
	-- client is inresponsive without loop
	-- no info on colyseus doc though
	client:loop()
end

function on_message(self, message_id, message, sender)
	--no messages can be sent before the client is ready
	if (not id) then
		return
	end
	if (message_id == hash("move")) then
		room:send("move",message.dir);
	elseif (message_id == hash("pickup")) then
		room:send("pickup",message.item);
	elseif (message_id == hash("drop")) then
		room:send("drop");
	end
end
